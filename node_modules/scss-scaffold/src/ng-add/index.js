"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
function setupOptions(host, options) {
    const workspace = config_1.getWorkspace(host);
    const workspaceConfig = host.read('angular.json');
    if (!workspaceConfig) {
        throw new schematics_1.SchematicsException("Not an Angular CLI workspace");
    }
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    return host;
}
exports.setupOptions = setupOptions;
// Update CLI angular.json file
function updateCLIConfig(options, host) {
    const { getWorkspace, updateWorkspace } = require('@schematics/angular/utility/workspace');
    const workspace = getWorkspace(host);
    const stylesPath = 'src/styles/styles.scss';
    const angularJsonFile = host.read('angular.json');
    if (angularJsonFile) {
        const angularJsonFileObject = JSON.parse(angularJsonFile.toString('utf-8'));
        console.log("angular file object", angularJsonFileObject);
        const project = options.project ? options.project : Object.keys(angularJsonFileObject['projects'])[0];
        const projectObject = angularJsonFileObject.projects[project];
        const styles = projectObject.architect.build.options.styles;
        // Add new styles file path to angular.json styles object
        styles.push(stylesPath);
        // Write back updated angular.json file
        host.overwrite('angular.json', JSON.stringify(angularJsonFileObject, null, "\t"));
    }
    updateWorkspace(workspace);
    return host;
}
function ngAdd(options) {
    return (host, _context) => {
        setupOptions(host, options);
        updateCLIConfig(options, host);
        // Rename original SCSS file
        if (host.exists('src/styles.scss')) {
            host.rename('src/styles.scss', 'src/original-styles.scss');
        }
        // Add SCSS folders and files
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template({}),
            schematics_1.move('src')
        ]);
        const rule = schematics_1.chain([
            schematics_1.branchAndMerge(schematics_1.chain([
                schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Default),
            ]))
        ]);
        return rule(host, _context);
    };
}
exports.ngAdd = ngAdd;
//# sourceMappingURL=index.js.map