/**
 * Give an input string, strictly parses a boolean value.
 *
 * @param value The boolean string to parse.
 * @returns true for "true", false for "false", otherwise an error is thrown.
 */
export declare const parseBoolean: (value: string) => boolean;
export declare const expectBoolean: (value: any) => boolean | undefined;
/**
 * Asserts a value is a number and returns it.
 *
 * @param value A value that is expected to be a number.
 * @returns The value if it's a number, undefined if it's null/undefined,
 *   otherwise an error is thrown.
 */
export declare const expectNumber: (value: any) => number | undefined;
/**
 * Asserts a value is a string and returns it.
 *
 * @param value A value that is expected to be a string.
 * @returns The value if it's a string, undefined if it's null/undefined,
 *   otherwise an error is thrown.
 */
export declare const expectString: (value: any) => string | undefined;
/**
 * Asserts a value is a number and returns it, and also converts string
 * representations of non-numeric floats into Numbers.
 *
 * @param value A number or string representation of a non-numeric float.
 * @returns The value as a number, undefined if it's null/undefined,
 *     otherwise an error is thrown.
 */
export declare const handleFloat: (value: string | number) => number | undefined;
